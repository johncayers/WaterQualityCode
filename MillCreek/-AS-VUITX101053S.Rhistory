if (as.Date(Data$datetime[i]) >= as.Date("2020-06-20") & as.Date(Data$datetime[i]) <= as.Date("2020-09-21")) {
Data$Season[i] = paste("Summer")
} %>%
if (as.Date(Data$datetime[i]) >= as.Date("2020-09-22") & as.Date(Data$datetime[i]) <= as.Date("2020-12-20")) {
Data$Season[i] = paste("Fall")
}
}
for (i in 1:nrow(Data)) {
if (as.Date(Data$datetime[i]) >= as.Date("2019-12-21") & as.Date(Data$datetime[i]) <= as.Date("2020-03-19")) {
Data$Season[i] = paste("Winter")
}
if (as.Date(Data$datetime[i]) >= as.Date("2020-03-20") & as.Date(Data$datetime[i]) <= as.Date("2020-06-19")) {
Data$Season[i] = paste("Spring")
}
if (as.Date(Data$datetime[i]) >= as.Date("2020-06-20") & as.Date(Data$datetime[i]) <= as.Date("2020-09-21")) {
Data$Season[i] = paste("Summer")
}
if (as.Date(Data$datetime[i]) >= as.Date("2020-09-22") & as.Date(Data$datetime[i]) <= as.Date("2020-12-20")) {
Data$Season[i] = paste("Fall")
}
}
library(psych)
Data$Season <- factor(Data$Season)
textvars <- c("Temp_C", "SpC", "pH", "DO")
describeBy(Data[textvars], list(Data$Season))
print("From ", min(Data$datetime), " to ", max(Data$datetime))
MinDate <- as.Date(min(Data$datetime))
MaxDate <- as.Date(max(Data$datetime))
print("From ", MinDate, " to ", MaxDate)
print(paste("From ", MinDate, " to ", MaxDate))
# Suppress all error messages
knitr::opts_chunk$set(error = FALSE)
if (!require("pacman"))
install.packages("pacman")
pacman::p_load(tidyverse, lubridate, skimr, timetk, leaflet, psych)
m <- leaflet(df) %>% addMarkers(lat = 36.16389, lng = -86.69917) %>% addTiles()
m
# Unfortunately this USGS station does not have discharge data
# The begin and end dates can be changed in the url below
Data <- read_delim("https://nwis.waterdata.usgs.gov/usa/nwis/uv/?cb_00095=on&cb_00300=on&cb_00010=on&cb_00400=on&format=rdb&site_no=03431083&period=&begin_date=2019-12-22&end_date=2020-12-21", "\t", escape_double = FALSE, col_names = TRUE, locale = locale(tz = "America/Chicago"), trim_ws = TRUE, skip = 30)
Data <- Data[-1,-(1:2)]
Data <- rename(Data, Temp_C = `131093_00010`, SpC = `131094_00095`, pH = `131095_00400`, DO = `131096_00300`)
Data <- select(Data, datetime, Temp_C, SpC, pH, DO)
Data <- type_convert(Data)
skim(Data)
write_excel_csv(Data, "MillCreekDataWQ.csv", col_names = TRUE)
DataLong <-  gather(Data, variable, measurement, Temp_C:DO, factor_key=TRUE)
MinDate <- as.Date(min(Data$datetime))
MaxDate <- as.Date(max(Data$datetime))
print(paste("From ", MinDate, " to ", MaxDate))
print(ggplot(DataLong, aes(x = datetime, y = measurement)) +
geom_line() +
scale_x_datetime(date_labels = "%Y-%m") +
facet_wrap(~ variable, scales = "free", nrow = 2))
# Winter <- filter(Data, as.Date(datetime) >= as.Date("2019-12-21") & as.Date(datetime) <= as.Date("2020-03-19"))
# Spring <- filter(Data, as.Date(datetime) >= as.Date("2020-03-20") & as.Date(datetime) <= as.Date("2020-06-19"))
# Summer <- filter(Data, as.Date(datetime) >= as.Date("2020-06-20") & as.Date(datetime) <= as.Date("2020-09-21"))
# Fall <- filter(Data, as.Date(datetime) >= as.Date("2020-09-22") & as.Date(datetime) <= as.Date("2020-12-20"))
Data <- Data %>%
add_column(Season = NA)
for (i in 1:nrow(Data)) {
if (as.Date(Data$datetime[i]) >= as.Date("2019-12-21") & as.Date(Data$datetime[i]) <= as.Date("2020-03-19")) {
Data$Season[i] = paste("Winter")
}
if (as.Date(Data$datetime[i]) >= as.Date("2020-03-20") & as.Date(Data$datetime[i]) <= as.Date("2020-06-19")) {
Data$Season[i] = paste("Spring")
}
if (as.Date(Data$datetime[i]) >= as.Date("2020-06-20") & as.Date(Data$datetime[i]) <= as.Date("2020-09-21")) {
Data$Season[i] = paste("Summer")
}
if (as.Date(Data$datetime[i]) >= as.Date("2020-09-22") & as.Date(Data$datetime[i]) <= as.Date("2020-12-20")) {
Data$Season[i] = paste("Fall")
}
}
Data$Season <- factor(Data$Season)
textvars <- c("Temp_C", "SpC", "pH", "DO")
describeBy(Data[textvars], list(Data$Season))
percent_change <- function(x) {
x <- 100*((x - mean(x, na.rm = TRUE))/mean(x, na.rm = TRUE))
}
season_change <- function(y) {transmute(y, datetime,
Temp_C = percent_change(Temp_C),
SpC = percent_change(SpC),
pH = percent_change(pH),
DO = percent_change(DO)
)}
Winter <- filter(Data, Season == "Winter")
WinterChange <- season_change(Winter)
View(WinterChange)
Spring <- filter(Data, Season == "Spring")
SpringChange <- season_change(Spring)
Summer <- filter(Data, Season == "Summer")
SummerChange <- season_change(Summer)
Fall <- filter(Data, Season == "Fall")
FallChange <- season_change(Fall)
SeasonChange <- bind_rows(Winter, Spring, Summer, Fall)
season_change <- function(y) {transmute(y, datetime, Season,
Temp_C = percent_change(Temp_C),
SpC = percent_change(SpC),
pH = percent_change(pH),
DO = percent_change(DO)
)}
Winter <- filter(Data, Season == "Winter")
WinterChange <- season_change(Winter)
Spring <- filter(Data, Season == "Spring")
SpringChange <- season_change(Spring)
Summer <- filter(Data, Season == "Summer")
SummerChange <- season_change(Summer)
Fall <- filter(Data, Season == "Fall")
FallChange <- season_change(Fall)
SeasonChange <- bind_rows(Winter, Spring, Summer, Fall)
View(SeasonChange)
names(SeasonChange)
head(SeasonChange)
SeasonChange <- bind_rows(WinterChange, SpringChange, SummerChange, FallChange)
describeBy(SeasonChange[textvars], list(SeasonChange$Season))
SpC <- match("SpC", names(Data))
pH <- match("pH", names(Data))
DO <-  match("DO", names(Data))
Temp_C <-  match("Temp_C", names(Data))
vars <- c(SpC, pH, DO, Temp_C)
for (i in vars) {
print(ggplot(Data, aes_(x = ~Season, y = as.name(names(Data)[i]), color = ~Season)) +
geom_boxplot()
}
for (i in vars) {
print(ggplot(Data, aes_(x = ~Season, y = as.name(names(Data)[i]), color = ~Season)) +
geom_boxplot())
}
Data2 <- Data %>% drop_na()
SpC <- match("SpC", names(Data2))
pH <- match("pH", names(Data2))
DO <-  match("DO", names(Data2))
Temp_C <-  match("Temp_C", names(Data2))
vars <- c(SpC, pH, DO, Temp_C)
for (i in vars) {
print(ggplot(Data2, aes_(x = ~Season, y = as.name(names(Data)[i]), color = ~Season)) +
geom_boxplot())
}
# Suppress all error messages
knitr::opts_chunk$set(error = FALSE)
if (!require("pacman"))
install.packages("pacman")
pacman::p_load(tidyverse, lubridate, skimr, timetk, leaflet, psych)
m <- leaflet(df) %>% addMarkers(lat = 36.16389, lng = -86.69917) %>% addTiles()
m
# Unfortunately this USGS station does not have discharge data
# The begin and end dates can be changed in the url below
Data <- read_delim("https://nwis.waterdata.usgs.gov/usa/nwis/uv/?cb_00095=on&cb_00300=on&cb_00010=on&cb_00400=on&format=rdb&site_no=03431083&period=&begin_date=2019-12-22&end_date=2020-12-21", "\t", escape_double = FALSE, col_names = TRUE, locale = locale(tz = "America/Chicago"), trim_ws = TRUE, skip = 30)
Data <- Data[-1,-(1:2)]
Data <- rename(Data, Temp_C = `131093_00010`, SpC = `131094_00095`, pH = `131095_00400`, DO = `131096_00300`)
Data <- select(Data, datetime, Temp_C, SpC, pH, DO)
Data <- type_convert(Data)
skim(Data)
write_excel_csv(Data, "MillCreekDataWQ.csv", col_names = TRUE)
DataLong <-  gather(Data, variable, measurement, Temp_C:DO, factor_key=TRUE)
MinDate <- as.Date(min(Data$datetime))
MaxDate <- as.Date(max(Data$datetime))
print(paste("From ", MinDate, " to ", MaxDate))
print(ggplot(DataLong, aes(x = datetime, y = measurement)) +
geom_line() +
scale_x_datetime(date_labels = "%Y-%m") +
facet_wrap(~ variable, scales = "free", nrow = 2))
Data <- Data %>%
add_column(Season = NA)
for (i in 1:nrow(Data)) {
if (as.Date(Data$datetime[i]) >= as.Date("2019-12-21") & as.Date(Data$datetime[i]) <= as.Date("2020-03-19")) {
Data$Season[i] = paste("Winter")
}
if (as.Date(Data$datetime[i]) >= as.Date("2020-03-20") & as.Date(Data$datetime[i]) <= as.Date("2020-06-19")) {
Data$Season[i] = paste("Spring")
}
if (as.Date(Data$datetime[i]) >= as.Date("2020-06-20") & as.Date(Data$datetime[i]) <= as.Date("2020-09-21")) {
Data$Season[i] = paste("Summer")
}
if (as.Date(Data$datetime[i]) >= as.Date("2020-09-22") & as.Date(Data$datetime[i]) <= as.Date("2020-12-20")) {
Data$Season[i] = paste("Fall")
}
}
Data$Season <- factor(Data$Season, levels = c("Spring", "Summer", "Fall", "Winter"))
textvars <- c("Temp_C", "SpC", "pH", "DO")
describeBy(Data[textvars], list(Data$Season))
Data2 <- Data %>% drop_na()
SpC <- match("SpC", names(Data2))
pH <- match("pH", names(Data2))
DO <-  match("DO", names(Data2))
Temp_C <-  match("Temp_C", names(Data2))
vars <- c(SpC, pH, DO, Temp_C)
for (i in vars) {
print(ggplot(Data2, aes_(x = ~Season, y = as.name(names(Data)[i]), color = ~Season)) +
geom_boxplot())
}
percent_change <- function(x) {
x <- 100*((x - mean(x, na.rm = TRUE))/mean(x, na.rm = TRUE))
}
season_change <- function(y) {transmute(y, datetime, Season,
Temp_C = percent_change(Temp_C),
SpC = percent_change(SpC),
pH = percent_change(pH),
DO = percent_change(DO)
)}
Winter <- filter(Data, Season == "Winter")
WinterChange <- season_change(Winter)
Spring <- filter(Data, Season == "Spring")
SpringChange <- season_change(Spring)
Summer <- filter(Data, Season == "Summer")
SummerChange <- season_change(Summer)
Fall <- filter(Data, Season == "Fall")
FallChange <- season_change(Fall)
SeasonChange <- bind_rows(WinterChange, SpringChange, SummerChange, FallChange)
describeBy(SeasonChange[textvars], list(SeasonChange$Season))
plot_seasonal_diagnostics(Data, datetime, SpC, .feature_set = c("hour", "month.lbl"), .interactive = TRUE)
plot_seasonal_diagnostics(Data, datetime, Temp_C, .feature_set = c("hour", "month.lbl"), .interactive = TRUE)
plot_seasonal_diagnostics(Data, datetime, pH, .feature_set = c("hour", "month.lbl"), .interactive = TRUE)
plot_seasonal_diagnostics(Data, datetime, DO, .feature_set = c("hour", "month.lbl"), .interactive = TRUE)
sessionInfo()
save.image()
names(providers)
m %>% addProviderTiles(providers$Esri.WorldImagery)
library(htmltools)
m <- leaflet(df) %>% addMarkers(lat = 36.16389, lng = -86.69917, popup = ~htmlEscape("USGS Station #03431083 Mill Creek at Lebanon Road, https://waterdata.usgs.gov/nwis/inventory/?site_no=03431083&agency_cd=USGS"
)) %>% addTiles()
m <- leaflet(df) %>% addMarkers(lat = 36.16389, lng = -86.69917, popup = ~htmlEscape(USGS Station #03431083 Mill Creek at Lebanon Road, https://waterdata.usgs.gov/nwis/inventory/?site_no=03431083&agency_cd=USGS
m <- leaflet(df) %>% addMarkers(lat = 36.16389, lng = -86.69917, popup = ~htmlEscape(USGS Station 03431083 Mill Creek at Lebanon Road, https://waterdata.usgs.gov/nwis/inventory/?site_no=03431083&agency_cd=USGS
cap <- c("USGS Station #03431083 Mill Creek at Lebanon Road, https://waterdata.usgs.gov/nwis/inventory/?site_no=03431083&agency_cd=USGS
")
m <- leaflet(df) %>% addMarkers(lat = 36.16389, lng = -86.69917, popup = ~htmlEscape(cap)) %>% addTiles()
cap <- c("USGS Station 03431083 Mill Creek at Lebanon Road, https://waterdata.usgs.gov/nwis/inventory/?site_no=03431083&agency_cd=USGS")
m <- leaflet(df) %>% addMarkers(lat = 36.16389, lng = -86.69917, popup = ~htmlEscape(cap)) %>% addTiles()
site <- tibble(lat = 36.16389, lng = -86.69917, cap = c("USGS Station 03431083 Mill Creek at Lebanon Road, https://waterdata.usgs.gov/nwis/inventory/?site_no=03431083&agency_cd=USGS"))
View(site)
m <- leaflet(site) %>% addMarkers(lat = ~lat, lng = ~lng, popup = ~htmlEscape(cap)) %>% addTiles()
m
m %>% addProviderTiles(providers$Esri.WorldImagery)
SeasonBoxplot <- function(z) {
for (i in vars) {
print(ggplot(z, aes_(x = ~Season, y = as.name(names(Data)[i]), color = ~Season)) +
geom_boxplot())
}
}
SeasonBoxplot(Data2)
SeasonBoxplot(SeasonChange)
SeasonBoxplot <- function(z) {
for (i in vars) {
print(ggplot(z, aes_(x = ~Season, y = as.name(names(z)[i]), color = ~Season)) +
geom_boxplot())
}
}
SeasonBoxplot(Data2)
SeasonBoxplot(SeasonChange)
as.name(names(z)[i])
names(SeasonChange)
names(Data2)
season_change <- function(y) {transmute(y, datetime,
Temp_C = percent_change(Temp_C),
SpC = percent_change(SpC),
pH = percent_change(pH),
DO = percent_change(DO),
Season
)}
Winter <- filter(Data, Season == "Winter")
WinterChange <- season_change(Winter)
Spring <- filter(Data, Season == "Spring")
SpringChange <- season_change(Spring)
Summer <- filter(Data, Season == "Summer")
SummerChange <- season_change(Summer)
Fall <- filter(Data, Season == "Fall")
FallChange <- season_change(Fall)
SeasonChange <- bind_rows(WinterChange, SpringChange, SummerChange, FallChange)
# describeBy(SeasonChange[textvars], list(SeasonChange$Season))
SeasonBoxplot(SeasonChange)
percent_change <- function(x) {
x <- 100*((x - mean(x, na.rm = TRUE))/mean(x, na.rm = TRUE))
}
season_change <- function(y) {transmute(y, datetime,
Temp_C = percent_change(Temp_C),
SpC = percent_change(SpC),
pH = percent_change(pH),
DO = percent_change(DO),
Season
)}
Winter <- filter(Data, Season == "Winter")
WinterChange <- season_change(Winter)
Spring <- filter(Data, Season == "Spring")
SpringChange <- season_change(Spring)
Summer <- filter(Data, Season == "Summer")
SummerChange <- season_change(Summer)
Fall <- filter(Data, Season == "Fall")
FallChange <- season_change(Fall)
SeasonChange <- bind_rows(WinterChange, SpringChange, SummerChange, FallChange)
# describeBy(SeasonChange[textvars], list(SeasonChange$Season))
SeasonBoxplot(SeasonChange)
# Suppress all error messages
knitr::opts_chunk$set(error = FALSE)
if (!require("pacman"))
install.packages("pacman")
pacman::p_load(tidyverse, lubridate, skimr, timetk, leaflet, psych, htmltools)
site <- tibble(lat = 36.16389, lng = -86.69917, cap = c("USGS Station 03431083 Mill Creek at Lebanon Road, https://waterdata.usgs.gov/nwis/inventory/?site_no=03431083&agency_cd=USGS"))
m <- leaflet(site) %>% addMarkers(lat = ~lat, lng = ~lng, popup = ~htmlEscape(cap)) %>% addTiles()
m
m %>% addProviderTiles(providers$Esri.WorldImagery)
# Unfortunately this USGS station does not have discharge data
# The begin and end dates can be changed in the url below
Data <- read_delim("https://nwis.waterdata.usgs.gov/usa/nwis/uv/?cb_00095=on&cb_00300=on&cb_00010=on&cb_00400=on&format=rdb&site_no=03431083&period=&begin_date=2019-12-22&end_date=2020-12-21", "\t", escape_double = FALSE, col_names = TRUE, locale = locale(tz = "America/Chicago"), trim_ws = TRUE, skip = 30)
Data <- Data[-1,-(1:2)]
Data <- rename(Data, Temp_C = `131093_00010`, SpC = `131094_00095`, pH = `131095_00400`, DO = `131096_00300`)
Data <- select(Data, datetime, Temp_C, SpC, pH, DO)
Data <- type_convert(Data)
skim(Data)
write_excel_csv(Data, "MillCreekWQ_Seasonality.csv", col_names = TRUE)
DataLong <-  gather(Data, variable, measurement, Temp_C:DO, factor_key=TRUE)
MinDate <- as.Date(min(Data$datetime))
MaxDate <- as.Date(max(Data$datetime))
print(paste("From ", MinDate, " to ", MaxDate))
print(ggplot(DataLong, aes(x = datetime, y = measurement)) +
geom_line() +
scale_x_datetime(date_labels = "%Y-%m") +
facet_wrap(~ variable, scales = "free", nrow = 2))
Data <- Data %>%
add_column(Season = NA)
for (i in 1:nrow(Data)) {
if (as.Date(Data$datetime[i]) >= as.Date("2019-12-21") & as.Date(Data$datetime[i]) <= as.Date("2020-03-19")) {
Data$Season[i] = paste("Winter")
}
if (as.Date(Data$datetime[i]) >= as.Date("2020-03-20") & as.Date(Data$datetime[i]) <= as.Date("2020-06-19")) {
Data$Season[i] = paste("Spring")
}
if (as.Date(Data$datetime[i]) >= as.Date("2020-06-20") & as.Date(Data$datetime[i]) <= as.Date("2020-09-21")) {
Data$Season[i] = paste("Summer")
}
if (as.Date(Data$datetime[i]) >= as.Date("2020-09-22") & as.Date(Data$datetime[i]) <= as.Date("2020-12-20")) {
Data$Season[i] = paste("Fall")
}
}
textvars <- c("Temp_C", "SpC", "pH", "DO")
describeBy(Data[textvars])
Data$Season <- factor(Data$Season, levels = c("Spring", "Summer", "Fall", "Winter"))
Data2 <- Data %>% drop_na()
SpC <- match("SpC", names(Data2))
pH <- match("pH", names(Data2))
DO <-  match("DO", names(Data2))
Temp_C <-  match("Temp_C", names(Data2))
vars <- c(SpC, pH, DO, Temp_C)
SeasonBoxplot <- function(z) {
for (i in vars) {
print(ggplot(z, aes_(x = ~Season, y = as.name(names(z)[i]), color = ~Season)) +
geom_boxplot())
}
}
SeasonBoxplot(Data2)
percent_change <- function(x) {
x <- 100*((x - mean(x, na.rm = TRUE))/mean(x, na.rm = TRUE))
}
season_change <- function(y) {transmute(y, datetime,
Temp_C = percent_change(Temp_C),
SpC = percent_change(SpC),
pH = percent_change(pH),
DO = percent_change(DO),
Season
)}
Winter <- filter(Data, Season == "Winter")
WinterChange <- season_change(Winter)
Spring <- filter(Data, Season == "Spring")
SpringChange <- season_change(Spring)
Summer <- filter(Data, Season == "Summer")
SummerChange <- season_change(Summer)
Fall <- filter(Data, Season == "Fall")
FallChange <- season_change(Fall)
SeasonChange <- bind_rows(WinterChange, SpringChange, SummerChange, FallChange)
# describeBy(SeasonChange[textvars], list(SeasonChange$Season))
SeasonBoxplot(SeasonChange)
plot_seasonal_diagnostics(Data, datetime, SpC, .feature_set = c("hour", "month.lbl"), .interactive = TRUE)
sessionInfo()
save.image("MillCreekSeasonality.RData")
names(Data2)
names(SeasonChange)
View(SeasonChange)
View(SeasonChange)
plot_seasonal_diagnostics(Data, datetime, DO, .feature_set = c("hour.lbl", "month.lbl"), .interactive = TRUE)
plot_seasonal_diagnostics(Data, datetime, DO, .feature_set = c("hour", "month.lbl"), .interactive = TRUE)
plot_seasonal_diagnostics(Data, datetime, DO, .feature_set = c("hour"), .interactive = TRUE)
Fall <- filter(Data, Season == "Fall")
plot_seasonal_diagnostics(Data, datetime, Temp_C, .feature_set = c("hour", "month.lbl"), .interactive = TRUE)
plot_seasonal_diagnostics(Fall, datetime, SpC, .feature_set = c("hour"), .interactive = TRUE)
Fall <- filter(Data, Season == "Fall")
plot_seasonal_diagnostics(Fall, datetime, Temp_C, .feature_set = c("hour"), .interactive = TRUE)
plot_seasonal_diagnostics(Fall, datetime, pH, .feature_set = c("hour"), .interactive = TRUE)
# Suppress all error messages
knitr::opts_chunk$set(error = FALSE)
if (!require("pacman"))
install.packages("pacman")
pacman::p_load(tidyverse, leaflet, htmltools)
SiteLocations <- tribble(~url, ~latitude, ~longitude, ~DrainageAreaSqMiles,
"Mill creek at Nolensville https://waterdata.usgs.gov/nwis/uv?site_no=03430550",36.00914,-86.70152,40.53,
"Mill creek at Thompson Lane https://waterdata.usgs.gov/nwis/uv?site_no=03431060",36.11752,-86.71905,93.4)
m <- leaflet(SiteLocations) %>% addMarkers(lat = ~latitude, lng = ~longitude, popup = ~htmlEscape(url)) %>% addTiles()
m
m %>% addProviderTiles(providers$Esri.WorldImagery)
TL <- read_delim("https://nwis.waterdata.usgs.gov/usa/nwis/uv/?cb_00060=on&cb_00045=on&format=rdb&site_no=03431060&period=&begin_date=2021-03-01&end_date=2021-04-01", "\t", escape_double = FALSE, col_names = TRUE, locale = locale(tz = "America/Chicago"), trim_ws = TRUE, skip = 27)
View(TL)
TL <- read_delim("https://nwis.waterdata.usgs.gov/usa/nwis/uv/?cb_00060=on&cb_00045=on&format=rdb&site_no=03431060&period=&begin_date=2021-03-01&end_date=2021-04-01", "\t", escape_double = FALSE, col_names = TRUE, locale = locale(tz = "America/Chicago"), trim_ws = TRUE, skip = 26)
TL <- TL[-1,-(1:2)]
TL <- rename(TL, Discharge = `131077_00060`, Precip = `131078_00045`)
TL <- read_delim("https://nwis.waterdata.usgs.gov/usa/nwis/uv/?cb_00060=on&cb_00045=on&format=rdb&site_no=03431060&period=&begin_date=2021-03-01&end_date=2021-04-01", "\t", escape_double = FALSE, col_names = TRUE, locale = locale(tz = "America/Chicago"), trim_ws = TRUE, skip = 26)
TL <- read_delim("https://nwis.waterdata.usgs.gov/usa/nwis/uv/?cb_00060=on&format=rdb&site_no=03431060&period=&begin_date=2021-03-01&end_date=2021-04-01", "\t", escape_double = FALSE, col_names = TRUE, locale = locale(tz = "America/Chicago"), trim_ws = TRUE, skip = 26)
TL <- TL[-1,-(1:2)]
TL <- rename(TL, Discharge = `131090_00060`)
TL <- select(TL, datetime, Discharge)
TL <- type_convert(TL)
print(ggplot(TL, aes(x = DateTime, y = Discharge)) +
geom_line())
print(ggplot(TL, aes(x = datetime, y = Discharge)) +
geom_line())
# The begin and end dates can be changed in the url below
# Discharge not always reported, so use gage height instead
Nolensville <- read_delim("https://nwis.waterdata.usgs.gov/usa/nwis/uv/?cb_00065=on&cb_00045=on&format=rdb&site_no=03430550&period=&begin_date=2021-03-01&end_date=2021-03-31", "\t", escape_double = FALSE, col_names = TRUE, locale = locale(tz = "America/Chicago"), trim_ws = TRUE, skip = 27)
Nolensville <- Nolensville[-1,-(1:2)]
View(Nolensville)
Nolensville <- read_delim("https://nwis.waterdata.usgs.gov/usa/nwis/uv/?cb_00065=on&cb_00045=on&format=rdb&site_no=03430550&period=&begin_date=2021-03-01&end_date=2021-03-31", "\t", escape_double = FALSE, col_names = TRUE, locale = locale(tz = "America/Chicago"), trim_ws = TRUE, skip = 28)
Nolensville <- Nolensville[-1,-(1:2)]
Nolensville <- rename(Nolensville, GageHeight = `131077_00065`, Precip = `131078_00045`)
Nolensville <- rename(Nolensville, GageHeight = `131076_00065`, Precip = `131078_00045`)
Nolensville <- select(Nolensville, datetime, GageHeight, Precip)
Nolensville <- type_convert(Nolensville)
print(ggplot(Nolensville, aes(x = DateTime, y = GageHeight)) +
geom_line())
print(ggplot(Nolensville, aes(x = datetime, y = GageHeight)) +
geom_line())
print(ggplot(data = Nolensville) +
geom_line(aes(x = datetime, y = GageHeight)) +
geom_line(aes(x = datetime, y = Precip)))
Nolensville <- Nolensville %>% drop_na()
print(ggplot(data = Nolensville) +
geom_line(aes(x = datetime, y = GageHeight)) +
geom_line(aes(x = datetime, y = Precip)))
Nolensville <- Nolensville %>% drop_na()
print(ggplot(data = Nolensville) +
geom_line(aes(x = datetime, y = GageHeight)) +
geom_line(aes(x = datetime, y = 10*Precip)))
print(ggplot(data = Nolensville) +
geom_line(aes(x = datetime, y = GageHeight)) +
geom_line(aes(x = datetime, y = 10*Precip, color = blue)))
print(ggplot(data = Nolensville) +
geom_line(aes(x = datetime, y = GageHeight)) +
geom_line(aes(x = datetime, y = 10*Precip, color = "blue")))
print(ggplot(data = Nolensville) +
geom_line(aes(x = datetime, y = GageHeight)) +
geom_line(aes(x = datetime, y = 10*Precip), color = "blue"))
print(ggplot(data = Nolensville) +
geom_line(aes(x = datetime, y = GageHeight)) +
geom_line(aes(x = datetime, y = 10*Precip), color = "blue")) +
theme_bw() +
theme(legend.position = "top")
print(ggplot(data = Nolensville) +
geom_line(aes(x = datetime, y = GageHeight)) +
geom_line(aes(x = datetime, y = 10*Precip), color = "blue")) +
theme_bw() +
theme(legend.position = "top")
print(ggplot(data = Nolensville) +
geom_line(aes(x = datetime, y = GageHeight)) +
geom_line(aes(x = datetime, y = 10*Precip), color = "blue")) +
theme_bw()
print(ggplot(data = Nolensville) +
geom_line(aes(x = datetime, y = GageHeight)) +
geom_line(aes(x = datetime, y = 10*Precip), color = "blue") +
theme_bw() +
theme(legend.position = "top"))
# The begin and end dates can be changed in the url below
# Discharge not always reported, so use gage height instead
Nolensville <- read_delim("https://nwis.waterdata.usgs.gov/usa/nwis/uv/?cb_00065=on&cb_00045=on&format=rdb&site_no=03430550&period=&begin_date=2021-03-01&end_date=2021-03-31", "\t", escape_double = FALSE, col_names = TRUE, locale = locale(tz = "America/Chicago"), trim_ws = TRUE, skip = 28)
Nolensville <- Nolensville[-1,-(1:2)]
Nolensville <- rename(Nolensville, GageHeight = `131076_00065`, Precip = `131078_00045`)
Nolensville <- select(Nolensville, datetime, GageHeight, Precip)
Nolensville <- type_convert(Nolensville)
print(ggplot(data = Nolensville) +
geom_line(aes(x = datetime, y = GageHeight)) +
ylab("Gage Height (ft)") +
theme_bw())
Nolensville <- Nolensville %>% drop_na()
print(ggplot(data = Nolensville) +
geom_line(aes(x = datetime, y = Precip), color = "blue") +
ylab("Precipitation (inches)") +
theme_bw())
knit_with_parameters('C:/Users/ayersj/OneDrive - Vanderbilt/Projects/MillCreek/MillCreekUSGS_WQ_Seasonality.Rmd', encoding = 'UTF-8')
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
library(tidyverse)
MillCreekDataWQ <- read_csv("MillCreekDataWQ.csv")
View(MillCreekDataWQ)
setwd("C:/Users/ayersj.VANDERBILT/OneDrive - Vanderbilt/Projects/MillCreek")
p <- ggplot(data=MillCreekDataWQ, mapping = aes(x=Temp_C, y=DO)) +
geom_point())
p <- ggplot(data=MillCreekDataWQ, mapping = aes(x=Temp_C, y=DO)) +
geom_point()
print(p)
# Suppress all error messages
knitr::opts_chunk$set(error = FALSE)
if (!require("pacman"))
install.packages("pacman")
pacman::p_load(tidyverse, skimr, timetk, leaflet)
m <- leaflet(df) %>% addMarkers(lat = 36.16389, lng = -86.69917) %>% addTiles()
m
# Unfortunately this USGS station does not have discharge data
# The begin and end dates can be changed in the url below
Data <- read_delim("https://nwis.waterdata.usgs.gov/usa/nwis/uv/?cb_00095=on&cb_00300=on&cb_00010=on&cb_00400=on&format=rdb&site_no=03431083&period=&begin_date=2020-10-02&end_date=2020-10-04", "\t", escape_double = FALSE, col_names = TRUE, locale = locale(tz = "America/Chicago"), trim_ws = TRUE, skip = 30)
Data <- Data[-1,-(1:2)]
Data <- rename(Data, Temp_C = `131093_00010`, SpC = `131094_00095`, pH = `131095_00400`, DO = `131096_00300`)
Data <- select(Data, datetime, Temp_C, SpC, pH, DO)
Data <- type_convert(Data)
skim(Data)
write_excel_csv(Data, "MillCreekDataWQ.csv", col_names = TRUE)
